import fs from 'fs';
import path from 'path';

const cartsFilePath = path.join(__dirname, '../data/carts.json');

class CartsController {
    static getCarts(req, res) {
        fs.readFile(cartsFilePath, 'utf-8', (err, data) => {
            if (err) {
                return res.status(500).json({ error: 'Error reading carts data' });
            }
            res.json(JSON.parse(data));
        });
    }

    static createCart(req, res) {
        const newCart = { id: Date.now(), products: [] };
        fs.readFile(cartsFilePath, 'utf-8', (err, data) => {
            if (err) {
                return res.status(500).json({ error: 'Error reading carts data' });
            }
            const carts = JSON.parse(data);
            carts.push(newCart);
            fs.writeFile(cartsFilePath, JSON.stringify(carts, null, 2), (err) => {
                if (err) {
                    return res.status(500).json({ error: 'Error saving cart' });
                }
                res.status(201).json(newCart);
            });
        });
    }

    static addProductToCart(req, res) {
        const { cartId, productId } = req.params;
        fs.readFile(cartsFilePath, 'utf-8', (err, data) => {
            if (err) {
                return res.status(500).json({ error: 'Error reading carts data' });
            }
            const carts = JSON.parse(data);
            const cart = carts.find(c => c.id == cartId);
            if (!cart) {
                return res.status(404).json({ error: 'Cart not found' });
            }
            cart.products.push(productId);
            fs.writeFile(cartsFilePath, JSON.stringify(carts, null, 2), (err) => {
                if (err) {
                    return res.status(500).json({ error: 'Error updating cart' });
                }
                res.json(cart);
            });
        });
    }

    static getCartProducts(req, res) {
        const { cartId } = req.params;
        fs.readFile(cartsFilePath, 'utf-8', (err, data) => {
            if (err) {
                return res.status(500).json({ error: 'Error reading carts data' });
            }
            const carts = JSON.parse(data);
            const cart = carts.find(c => c.id == cartId);
            if (!cart) {
                return res.status(404).json({ error: 'Cart not found' });
            }
            res.json(cart.products);
        });
    }
}

export default CartsController;