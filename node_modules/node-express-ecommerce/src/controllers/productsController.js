import fs from 'fs';
import path from 'path';

const productsFilePath = path.join(__dirname, '../data/products.json');

class ProductsController {
    static getAllProducts(req, res) {
        fs.readFile(productsFilePath, 'utf8', (err, data) => {
            if (err) {
                return res.status(500).json({ error: 'Error reading products data' });
            }
            const products = JSON.parse(data);
            res.json(products);
        });
    }

    static getProductById(req, res) {
        const { id } = req.params;
        fs.readFile(productsFilePath, 'utf8', (err, data) => {
            if (err) {
                return res.status(500).json({ error: 'Error reading products data' });
            }
            const products = JSON.parse(data);
            const product = products.find(p => p.id === parseInt(id));
            if (!product) {
                return res.status(404).json({ error: 'Product not found' });
            }
            res.json(product);
        });
    }

    static addProduct(req, res) {
        const newProduct = req.body;
        fs.readFile(productsFilePath, 'utf8', (err, data) => {
            if (err) {
                return res.status(500).json({ error: 'Error reading products data' });
            }
            const products = JSON.parse(data);
            newProduct.id = products.length ? products[products.length - 1].id + 1 : 1;
            products.push(newProduct);
            fs.writeFile(productsFilePath, JSON.stringify(products, null, 2), (err) => {
                if (err) {
                    return res.status(500).json({ error: 'Error saving product' });
                }
                res.status(201).json(newProduct);
            });
        });
    }

    static updateProduct(req, res) {
        const { id } = req.params;
        const updatedProduct = req.body;
        fs.readFile(productsFilePath, 'utf8', (err, data) => {
            if (err) {
                return res.status(500).json({ error: 'Error reading products data' });
            }
            let products = JSON.parse(data);
            const productIndex = products.findIndex(p => p.id === parseInt(id));
            if (productIndex === -1) {
                return res.status(404).json({ error: 'Product not found' });
            }
            updatedProduct.id = parseInt(id);
            products[productIndex] = updatedProduct;
            fs.writeFile(productsFilePath, JSON.stringify(products, null, 2), (err) => {
                if (err) {
                    return res.status(500).json({ error: 'Error updating product' });
                }
                res.json(updatedProduct);
            });
        });
    }

    static deleteProduct(req, res) {
        const { id } = req.params;
        fs.readFile(productsFilePath, 'utf8', (err, data) => {
            if (err) {
                return res.status(500).json({ error: 'Error reading products data' });
            }
            let products = JSON.parse(data);
            products = products.filter(p => p.id !== parseInt(id));
            fs.writeFile(productsFilePath, JSON.stringify(products, null, 2), (err) => {
                if (err) {
                    return res.status(500).json({ error: 'Error deleting product' });
                }
                res.status(204).send();
            });
        });
    }
}

export default ProductsController;