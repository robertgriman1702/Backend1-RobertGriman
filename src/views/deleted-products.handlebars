<div class="app-dashboard">
  <h1 class="app-dashboard__title">PRODUCTOS ELIMINADOS</h1>

  {{#with user}}
    <div class="app-user">
      <h2 class="app-user__name">{{username}}</h2>
      {{#if isAdmin}}
        <h3 class="app-user__admin-msg app-user--admin">Panel de productos eliminados</h3>
      {{/if}}
    </div>
  {{/with}}

  <div class="app-section">
    <h2>Lista de Productos Eliminados</h2>
    <p>Total de productos eliminados: <span id="deleted-count">{{deletedProducts.length}}</span></p>
  </div>

  <div class="app-products" id="deleted-products-container">
    {{#each deletedProducts}}
      <div class="app-product deleted-product" id="deleted-product-{{this.id}}">
        <div class="app-product__img-wrap">
          <img class="app-product__img" src="{{this.thumbnail}}" alt="{{this.title}}">
        </div>
        <h2 class="app-product__title">{{this.title}}</h2>
        <h3 class="app-product__price">Precio: ${{this.price}}</h3>
        <div class="app-product__meta">
          <p>Eliminado: {{formatDate this.deletedAt}}</p>
        </div>
        <button class="app-product__restore-btn" data-id="{{this.id}}">Restaurar Producto</button>
      </div>
    {{else}}
      <div class="app-empty-state">
        <p>No hay productos eliminados</p>
      </div>
    {{/each}}
  </div>

  <div class="app-section">
    <p><a href="/realtimeproducts">Volver al panel de administración</a></p>
    <p><a href="/">Ir a la página principal</a></p>
  </div>
</div>

<script src="/socket.io/socket.io.js"></script>
<script>
  const socket = io();
  
  console.log("WebSocket conectado para productos eliminados");

  // Escuchar cuando se agrega un nuevo producto eliminado
  socket.on("product added to deleted", (deletedProduct) => {
    console.log("Nuevo producto eliminado:", deletedProduct);
    
    // Actualizar el contador
    const countElement = document.getElementById('deleted-count');
    if (countElement) {
      const currentCount = parseInt(countElement.textContent) || 0;
      countElement.textContent = currentCount + 1;
    }

    // Agregar el producto a la lista si estamos en la página de eliminados
    const container = document.getElementById('deleted-products-container');
    if (container) {
      const productHTML = `
        <div class="app-product deleted-product" id="deleted-product-${deletedProduct.id}">
          <div class="app-product__img-wrap">
            <img class="app-product__img" src="${deletedProduct.thumbnail}" alt="${deletedProduct.title}">
          </div>
          <h2 class="app-product__title">${deletedProduct.title}</h2>
          <h3 class="app-product__price">Precio: $${deletedProduct.price}</h3>
          <div class="app-product__meta">
            <p>Eliminado: ${new Date(deletedProduct.deletedAt).toLocaleString()}</p>
          </div>
          <button class="app-product__restore-btn" data-id="${deletedProduct.id}">Restaurar Producto</button>
        </div>
      `;
      
      // Si hay estado vacío, removerlo
      const emptyState = container.querySelector('.app-empty-state');
      if (emptyState) {
        emptyState.remove();
      }
      
      container.insertAdjacentHTML('afterbegin', productHTML);
    }
  });

  // Manejar restauración de productos
  document.addEventListener('DOMContentLoaded', () => {
    const container = document.getElementById('deleted-products-container');
    
    if (container) {
      container.addEventListener('click', async (e) => {
        if (e.target.classList.contains('app-product__restore-btn')) {
          const productId = e.target.getAttribute('data-id');
          const productElement = e.target.closest('.app-product');
          const productTitle = productElement.querySelector('.app-product__title').textContent;
          
          if (confirm(`¿Estás seguro de que quieres restaurar el producto "${productTitle}"?`)) {
            try {
              const response = await fetch(`/api/products/deleted/restore/${productId}`, {
                method: 'POST'
              });
              
              const result = await response.json();
              
              if (response.ok) {
                // Remover el producto de la lista
                productElement.remove();
                
                // Actualizar contador
                const countElement = document.getElementById('deleted-count');
                if (countElement) {
                  const currentCount = parseInt(countElement.textContent) || 0;
                  countElement.textContent = Math.max(0, currentCount - 1);
                }
                
                // Mostrar mensaje de éxito
                alert('Producto restaurado correctamente');
                
                // Si no quedan productos, mostrar estado vacío
                if (container.children.length === 0) {
                  container.innerHTML = '<div class="app-empty-state"><p>No hay productos eliminados</p></div>';
                }
              } else {
                alert('Error: ' + result.error);
              }
            } catch (error) {
              console.error('Error restaurando producto:', error);
              alert('Error al restaurar producto');
            }
          }
        }
      });
    }
  });
</script>